//client:
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

#define BUFFER_SIZE 300
#define locall_host 127.0.0.1
#define num_port 8888


int main(void)
{
	int sockfd, portno, n;
	char hostname [256];
	struct sockaddr_in serv_addr;
	struct hostent *server;

	sockfd = socket(AF_INET, SOCK_STREAM, 0); /*open socket */
	if (sockfd < 0) /*checking if the socket indeed open */
	{
		printf("socket failed\n");
		exit(1);
	}
    memset(&serv_addr,0, sizeof(serv_addr)); /*delete what ever is in the serv_addr*/


    serv_addr.sin_family = AF_INET; /*the network architecture */
    serv_addr.sin_port= htons(num_port); /*the port number */
    serv_addr.sin_addr.s_addr=htonl(INADDR_LOOPBACK); /* the address */

    n= connect(sockfd,(struct sockaddr *) &serv_addr, sizeof(serv_addr));
    if(n<0){ /*if the connection does not work.*/
        printf("connection failed \n");
        exit (1);
    }


	printf("[Client] Connected\n");

    char query[BUFFER_SIZE];
    char result[BUFFER_SIZE];
    while (1)
    {
        memset(query, 0 ,BUFFER_SIZE); /*we will delete what ever is in the query and the result*/
        memset(result, 0 ,BUFFER_SIZE);
        fgets(query,BUFFER_SIZE,stdin);
        if(strncmp(query, "exit", 4) == 0){ /* if the user called to exit, then we will do that.*/
            break;
        }
        n= write(sockfd,query,sizeof(query)); /*else, we write this in the pipe, so the server will take care of that.*/
        if(n<0){ /*checking if the writing failed*/
            printf("writing failed \n");
            exit(1);
        }
        n= read(sockfd,result,BUFFER_SIZE); /*then we will read what the server do with the question */
        if(n<0){ /* checking if we could not read the massage*/
            printf("reading failed \n");
            exit(1);
        }

        printf("%s", result); /*then we will print the answer to the user*/


    }

    close(sockfd); /*when we done with the loop, we will close the socket*/
    return 0;
}

